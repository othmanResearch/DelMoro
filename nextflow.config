// nextflow.config file

params { 
	cpus		= 4
	outdir		= "outdir" 
	
	trimmomatic 	= false // Trimming with trimmomatic tool
	fastp		= false // Trimming with fastp tool
	params.bbduk	= false // Trimming with bbduk tool
	adapters	= null	// Path for adapter file
	
		
	reference	= null	// Reference file path
	
	rawreads	= null 	// Raw reads paths
	tobetrimmed 	= null	// Raw reads paths + trimmomatic parameters
	tobealigned 	= null 	// Trimmed read paths 
	bam		= null  // Bam files paths used for base recalibration 
	tovarcall	= null  // Bam files paths used for variant calling

	knownSite1	= null 	// knownsites file n°1 should be .vcf
	knownSite2  	= null  // knownsites file n°1 should be .vcf
		
	// Indexes  

	BamIndex	= "${params.outdir}/Indexes/BamFiles/*.bai"  // Bam Files Indexes  [ mandatory ]  

	ALIGNERIndex	= "${params.outdir}/Indexes/Reference/*.fa.{0123,amb,ann,bwt.2bit.64,pac,bwt,sa}"   //  Bwa-mem 1,2 Ref Indexes    
	DictGATK	= "${params.outdir}/Indexes/Reference/*.dict"					   //  GATK Dictionary Ref Index    					  
	SamtoolsIndex	= "${params.outdir}/Indexes/Reference/*.fa.fai"  				  //  Samtools fai Ref  				 
	     	
	aligner		= null  // Default to bwa -> bwamem2 [optional]
	
	generate	= null  // The default parameter generates vcf for all inputs ${onlyVCF} or A cohorte Gvcf ${cohorteGVCF}
	basedon		= null 	// First input csv to prepare CSVs based on it
	region		= null  // To extract specific region from initial mapped .bam
	bedtarget	= null  // Bed file
}

	includeConfig 'conf/igenomes.config' 
 	includeConfig 'conf/ivcf.config'


profiles  {  
    standard {
	process {
            executor 	= "local"		// definition of the local executor.   
            cpus	= "${params.cpus}"	// resources for default process execution   
        }
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        channels                = ['conda-forge', 'bioconda', 'defaults']
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        singularity.ociAutoPull = true
     // singularity.cacheDir    = "./work/singularity" 
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        apptainer.ociAutoPull 	= true
     // apptainer.cacheDir    	= "./work/singularity" 
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }    
     wave {
        singularity.enabled     = true
        singularity.autoMounts  = true
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container' 
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        docker.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        singularity.enabled     = false
        docker.enabled          = false
        podman.enabled          = false
        charliecloud.enabled    = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
    }
}



def date = new Date().format("HH-mm-ss-dd-MM-yyyy")

report {
    enabled     = true
    overwrite   = true
    file        = "${params.outdir}/RunReports/${date}_my_report.html"
}

trace {
    enabled     = true
    overwrite   = true
    file        = "${params.outdir}/RunReports/${date}_my_trace.txt"
}

timeline {
    enabled     = true
    overwrite   = true
    file        = "${params.outdir}/RunReports/${date}_my_timeline.html"
}

dag {
    enabled     = true
    overwrite   = true
    file        = "${params.outdir}/RunReports/${date}_my_pipeline_dag.dot"
}

